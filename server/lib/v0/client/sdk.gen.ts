// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { ChatsCreateData, ChatsCreateErrors, ChatsCreateResponses, ChatsDeleteData, ChatsDeleteErrors, ChatsDeleteResponses, ChatsDownloadVersionData, ChatsDownloadVersionErrors, ChatsDownloadVersionResponses, ChatsFavoriteData, ChatsFavoriteErrors, ChatsFavoriteResponses, ChatsFindData, ChatsFindErrors, ChatsFindMessagesData, ChatsFindMessagesErrors, ChatsFindMessagesResponses, ChatsFindResponses, ChatsFindVersionsData, ChatsFindVersionsErrors, ChatsFindVersionsResponses, ChatsForkData, ChatsForkErrors, ChatsForkResponses, ChatsGetByIdData, ChatsGetByIdErrors, ChatsGetByIdResponses, ChatsGetMessageData, ChatsGetMessageErrors, ChatsGetMessageResponses, ChatsGetVersionData, ChatsGetVersionErrors, ChatsGetVersionResponses, ChatsInitData, ChatsInitErrors, ChatsInitResponses, ChatsResumeData, ChatsResumeErrors, ChatsResumeResponses, ChatsSendMessageData, ChatsSendMessageErrors, ChatsSendMessageResponses, ChatsUpdateData, ChatsUpdateErrors, ChatsUpdateResponses, ChatsUpdateVersionData, ChatsUpdateVersionErrors, ChatsUpdateVersionResponses, DeploymentsCreateData, DeploymentsCreateErrors, DeploymentsCreateResponses, DeploymentsDeleteData, DeploymentsDeleteErrors, DeploymentsDeleteResponses, DeploymentsFindData, DeploymentsFindErrors, DeploymentsFindErrorsData, DeploymentsFindErrorsErrors, DeploymentsFindErrorsResponses, DeploymentsFindLogsData, DeploymentsFindLogsErrors, DeploymentsFindLogsResponses, DeploymentsFindResponses, DeploymentsGetByIdData, DeploymentsGetByIdErrors, DeploymentsGetByIdResponses, HooksCreateData, HooksCreateErrors, HooksCreateResponses, HooksDeleteData, HooksDeleteErrors, HooksDeleteResponses, HooksFindData, HooksFindErrors, HooksFindResponses, HooksGetByIdData, HooksGetByIdErrors, HooksGetByIdResponses, HooksUpdateData, HooksUpdateErrors, HooksUpdateResponses, IntegrationsVercelProjectsCreateData, IntegrationsVercelProjectsCreateErrors, IntegrationsVercelProjectsCreateResponses, IntegrationsVercelProjectsFindData, IntegrationsVercelProjectsFindErrors, IntegrationsVercelProjectsFindResponses, ProjectsAssignData, ProjectsAssignErrors, ProjectsAssignResponses, ProjectsCreateData, ProjectsCreateEnvVarsData, ProjectsCreateEnvVarsErrors, ProjectsCreateEnvVarsResponses, ProjectsCreateErrors, ProjectsCreateResponses, ProjectsDeleteData, ProjectsDeleteEnvVarsData, ProjectsDeleteEnvVarsErrors, ProjectsDeleteEnvVarsResponses, ProjectsDeleteErrors, ProjectsDeleteResponses, ProjectsFindData, ProjectsFindEnvVarsData, ProjectsFindEnvVarsErrors, ProjectsFindEnvVarsResponses, ProjectsFindErrors, ProjectsFindResponses, ProjectsGetByChatIdData, ProjectsGetByChatIdErrors, ProjectsGetByChatIdResponses, ProjectsGetByIdData, ProjectsGetByIdErrors, ProjectsGetByIdResponses, ProjectsGetEnvVarData, ProjectsGetEnvVarErrors, ProjectsGetEnvVarResponses, ProjectsUpdateData, ProjectsUpdateEnvVarsData, ProjectsUpdateEnvVarsErrors, ProjectsUpdateEnvVarsResponses, ProjectsUpdateErrors, ProjectsUpdateResponses, RateLimitsFindData, RateLimitsFindErrors, RateLimitsFindResponses, ReportsGetUsageData, ReportsGetUsageErrors, ReportsGetUsageResponses, UserGetBillingData, UserGetBillingErrors, UserGetBillingResponses, UserGetData, UserGetErrors, UserGetPlanData, UserGetPlanErrors, UserGetPlanResponses, UserGetResponses, UserGetScopesData, UserGetScopesErrors, UserGetScopesResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Find Chats
 * Retrieves a list of existing chats, with support for pagination and filtering by favorite status. Helps manage and navigate chat history.
 */
export const chatsFind = <ThrowOnError extends boolean = false>(options?: Options<ChatsFindData, ThrowOnError>) => {
    return (options?.client ?? client).get<ChatsFindResponses, ChatsFindErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats',
        ...options
    });
};

/**
 * Create Chat
 * Creates a new chat using a user message, optional system context, and model configuration. Useful for prompting the model within the scope of a specific project.
 */
export const chatsCreate = <ThrowOnError extends boolean = false>(options: Options<ChatsCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ChatsCreateResponses, ChatsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Initialize Chat
 * Initializes a new chat from source content such as files, repositories, registries, or zip archives. Enables context-rich conversations based on code or assets.
 */
export const chatsInit = <ThrowOnError extends boolean = false>(options: Options<ChatsInitData, ThrowOnError>) => {
    return (options.client ?? client).post<ChatsInitResponses, ChatsInitErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/init',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Chat
 * Deletes a specific chat based on the provided chatId. This operation is irreversible and permanently removes the chat and its contents.
 */
export const chatsDelete = <ThrowOnError extends boolean = false>(options: Options<ChatsDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<ChatsDeleteResponses, ChatsDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}',
        ...options
    });
};

/**
 * Get Chat
 * Retrieves the full details of a specific chat using its `chatId`. Includes messages, metadata, and associated configuration.
 */
export const chatsGetById = <ThrowOnError extends boolean = false>(options: Options<ChatsGetByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<ChatsGetByIdResponses, ChatsGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}',
        ...options
    });
};

/**
 * Update Chat
 * Updates the metadata of an existing chat using its `chatId`. Supports changes to the chat name and privacy setting.
 */
export const chatsUpdate = <ThrowOnError extends boolean = false>(options: Options<ChatsUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ChatsUpdateResponses, ChatsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Favorite Chat
 * Marks or unmarks a chat as a favorite using its `chatId`. This helps with organizing and quickly accessing important chats.
 */
export const chatsFavorite = <ThrowOnError extends boolean = false>(options: Options<ChatsFavoriteData, ThrowOnError>) => {
    return (options.client ?? client).put<ChatsFavoriteResponses, ChatsFavoriteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}/favorite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fork Chat
 * Creates a new chat fork (duplicate) from a specific version within an existing chat. Useful for branching off alternate directions without modifying the original conversation.
 */
export const chatsFork = <ThrowOnError extends boolean = false>(options: Options<ChatsForkData, ThrowOnError>) => {
    return (options.client ?? client).post<ChatsForkResponses, ChatsForkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}/fork',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Project by Chat ID
 * Retrieves the v0 project associated with a given chat. Useful for determining the context or scope of a chat session.
 */
export const projectsGetByChatId = <ThrowOnError extends boolean = false>(options: Options<ProjectsGetByChatIdData, ThrowOnError>) => {
    return (options.client ?? client).get<ProjectsGetByChatIdResponses, ProjectsGetByChatIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}/project',
        ...options
    });
};

/**
 * Find Chat Messages
 * Retrieves a list of all messages for a specific chat, ordered by creation date (newest first). Supports cursor-based pagination and includes message content, role, and type information.
 */
export const chatsFindMessages = <ThrowOnError extends boolean = false>(options: Options<ChatsFindMessagesData, ThrowOnError>) => {
    return (options.client ?? client).get<ChatsFindMessagesResponses, ChatsFindMessagesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}/messages',
        ...options
    });
};

/**
 * Send Message
 * Creates a new message in an existing chat. Triggers a model response using the provided prompt, with optional attachments and configuration settings.
 */
export const chatsSendMessage = <ThrowOnError extends boolean = false>(options: Options<ChatsSendMessageData, ThrowOnError>) => {
    return (options.client ?? client).post<ChatsSendMessageResponses, ChatsSendMessageErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Chat Message
 * Retrieves detailed information about a specific message within a chat, including content, files, model configuration, and demo URLs.
 */
export const chatsGetMessage = <ThrowOnError extends boolean = false>(options: Options<ChatsGetMessageData, ThrowOnError>) => {
    return (options.client ?? client).get<ChatsGetMessageResponses, ChatsGetMessageErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}/messages/{messageId}',
        ...options
    });
};

/**
 * Find Chat Versions
 * Retrieves a list of all versions (iterations) for a specific chat, ordered by creation date (newest first). Supports cursor-based pagination and includes version status and demo URLs.
 */
export const chatsFindVersions = <ThrowOnError extends boolean = false>(options: Options<ChatsFindVersionsData, ThrowOnError>) => {
    return (options.client ?? client).get<ChatsFindVersionsResponses, ChatsFindVersionsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}/versions',
        ...options
    });
};

/**
 * Get Chat Version
 * Retrieves detailed information about a specific version of a chat, including all files with their content and lock status.
 */
export const chatsGetVersion = <ThrowOnError extends boolean = false>(options: Options<ChatsGetVersionData, ThrowOnError>) => {
    return (options.client ?? client).get<ChatsGetVersionResponses, ChatsGetVersionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}/versions/{versionId}',
        ...options
    });
};

/**
 * Update Chat Version Files
 * Updates the source files of a specific chat version (block) manually. This allows editing generated files directly through the API.
 */
export const chatsUpdateVersion = <ThrowOnError extends boolean = false>(options: Options<ChatsUpdateVersionData, ThrowOnError>) => {
    return (options.client ?? client).patch<ChatsUpdateVersionResponses, ChatsUpdateVersionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}/versions/{versionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Download version files
 * Download all files for a specific chat version as a zip or tarball archive. Use includeDefaultFiles=true to include all deployment files (package.json, configuration files, etc.) or false/omitted to return only the generated source files.
 */
export const chatsDownloadVersion = <ThrowOnError extends boolean = false>(options: Options<ChatsDownloadVersionData, ThrowOnError>) => {
    return (options.client ?? client).get<ChatsDownloadVersionResponses, ChatsDownloadVersionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}/versions/{versionId}/download',
        ...options
    });
};

/**
 * Resume Message
 * Resumes processing of a previously interrupted or incomplete message in a chat. Useful for continuing generation when a message was paused or stopped.
 */
export const chatsResume = <ThrowOnError extends boolean = false>(options: Options<ChatsResumeData, ThrowOnError>) => {
    return (options.client ?? client).post<ChatsResumeResponses, ChatsResumeErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chatId}/messages/{messageId}/resume',
        ...options
    });
};

/**
 * Find Deployments
 * Find deployments by project and chat IDs. This will return a list of deployments for the given project and chat IDs.
 */
export const deploymentsFind = <ThrowOnError extends boolean = false>(options: Options<DeploymentsFindData, ThrowOnError>) => {
    return (options.client ?? client).get<DeploymentsFindResponses, DeploymentsFindErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/deployments',
        ...options
    });
};

/**
 * Create Deployment
 * Create a new deployment for a specific chat and version. This will trigger a deployment to Vercel.
 */
export const deploymentsCreate = <ThrowOnError extends boolean = false>(options: Options<DeploymentsCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<DeploymentsCreateResponses, DeploymentsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/deployments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Deployment
 * Delete a deployment by ID. This will delete the deployment from Vercel.
 */
export const deploymentsDelete = <ThrowOnError extends boolean = false>(options: Options<DeploymentsDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeploymentsDeleteResponses, DeploymentsDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/deployments/{deploymentId}',
        ...options
    });
};

/**
 * Get Deployment
 * Get a deployment by ID. This will return the details of the deployment, including the inspector URL, chat ID, project ID, version ID, API URL, and web URL.
 */
export const deploymentsGetById = <ThrowOnError extends boolean = false>(options: Options<DeploymentsGetByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<DeploymentsGetByIdResponses, DeploymentsGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/deployments/{deploymentId}',
        ...options
    });
};

/**
 * Find Deployment Logs
 * Retrieves logs for a specific deployment. Supports filtering by timestamp to fetch only recent logs.
 */
export const deploymentsFindLogs = <ThrowOnError extends boolean = false>(options: Options<DeploymentsFindLogsData, ThrowOnError>) => {
    return (options.client ?? client).get<DeploymentsFindLogsResponses, DeploymentsFindLogsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/deployments/{deploymentId}/logs',
        ...options
    });
};

/**
 * Find Deployment Errors
 * Retrieves a list of errors that occurred during a specific deployment. Useful for diagnosing and debugging deployment issues.
 */
export const deploymentsFindErrors = <ThrowOnError extends boolean = false>(options: Options<DeploymentsFindErrorsData, ThrowOnError>) => {
    return (options.client ?? client).get<DeploymentsFindErrorsResponses, DeploymentsFindErrorsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/deployments/{deploymentId}/errors',
        ...options
    });
};

/**
 * Find Hooks
 * Retrieves a list of existing hooks in your workspace. Useful for managing active webhooks tied to chat events or deployments.
 */
export const hooksFind = <ThrowOnError extends boolean = false>(options?: Options<HooksFindData, ThrowOnError>) => {
    return (options?.client ?? client).get<HooksFindResponses, HooksFindErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/hooks',
        ...options
    });
};

/**
 * Create Hook
 * Creates a new webhook that listens for specific events. Supports optional association with a chat.
 */
export const hooksCreate = <ThrowOnError extends boolean = false>(options: Options<HooksCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<HooksCreateResponses, HooksCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/hooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Hook
 * Deletes a webhook based on its ID. This action is irreversible.
 */
export const hooksDelete = <ThrowOnError extends boolean = false>(options: Options<HooksDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<HooksDeleteResponses, HooksDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/hooks/{hookId}',
        ...options
    });
};

/**
 * Get Hook
 * Retrieves the details of a specific webhook using its ID.
 */
export const hooksGetById = <ThrowOnError extends boolean = false>(options: Options<HooksGetByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<HooksGetByIdResponses, HooksGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/hooks/{hookId}',
        ...options
    });
};

/**
 * Update Hook
 * Updates the configuration of an existing webhook, including its name, event subscriptions, or target URL.
 */
export const hooksUpdate = <ThrowOnError extends boolean = false>(options: Options<HooksUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<HooksUpdateResponses, HooksUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/hooks/{hookId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Find Vercel Projects
 * Retrieves a list of Vercel projects linked to your integration. Useful for associating chats, deployments, or hooks with specific Vercel projects.
 */
export const integrationsVercelProjectsFind = <ThrowOnError extends boolean = false>(options?: Options<IntegrationsVercelProjectsFindData, ThrowOnError>) => {
    return (options?.client ?? client).get<IntegrationsVercelProjectsFindResponses, IntegrationsVercelProjectsFindErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/integrations/vercel/projects',
        ...options
    });
};

/**
 * Create Vercel Project
 * Links a Vercel project to an existing v0 project. Enables Vercel-related features and deployment integration within the v0 workspace.
 */
export const integrationsVercelProjectsCreate = <ThrowOnError extends boolean = false>(options: Options<IntegrationsVercelProjectsCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<IntegrationsVercelProjectsCreateResponses, IntegrationsVercelProjectsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/integrations/vercel/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Find Projects
 * Returns a list of all v0 projects in your workspace. Useful for browsing or managing projects across different chats or use cases.
 */
export const projectsFind = <ThrowOnError extends boolean = false>(options?: Options<ProjectsFindData, ThrowOnError>) => {
    return (options?.client ?? client).get<ProjectsFindResponses, ProjectsFindErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/projects',
        ...options
    });
};

/**
 * Create Project
 * Creates a new v0 project with an optional description, icon, environment variables, and instructions. Projects help organize chats and manage context.
 */
export const projectsCreate = <ThrowOnError extends boolean = false>(options: Options<ProjectsCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ProjectsCreateResponses, ProjectsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Project
 * Deletes a specific project based on the provided projectId. This operation marks the project as deleted and is irreversible.
 */
export const projectsDelete = <ThrowOnError extends boolean = false>(options: Options<ProjectsDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<ProjectsDeleteResponses, ProjectsDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}',
        ...options
    });
};

/**
 * Get Project by ID
 * Retrieves the details of a specific v0 project by its ID.
 */
export const projectsGetById = <ThrowOnError extends boolean = false>(options: Options<ProjectsGetByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<ProjectsGetByIdResponses, ProjectsGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}',
        ...options
    });
};

/**
 * Update Project
 * Updates the metadata of an existing project using its `projectId`. Supports changes to the project name and privacy setting.
 */
export const projectsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectsUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ProjectsUpdateResponses, ProjectsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Assign Project to Chat
 * Links an existing v0 project to a specific chat. Helps group conversations under a shared project context.
 */
export const projectsAssign = <ThrowOnError extends boolean = false>(options: Options<ProjectsAssignData, ThrowOnError>) => {
    return (options.client ?? client).post<ProjectsAssignResponses, ProjectsAssignErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/assign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Find Environment Variables
 * Retrieves all environment variables for a given project.
 */
export const projectsFindEnvVars = <ThrowOnError extends boolean = false>(options: Options<ProjectsFindEnvVarsData, ThrowOnError>) => {
    return (options.client ?? client).get<ProjectsFindEnvVarsResponses, ProjectsFindEnvVarsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/env-vars',
        ...options
    });
};

/**
 * Update Environment Variables
 * Updates multiple environment variables for a given project. Only the value of each environment variable can be updated.
 */
export const projectsUpdateEnvVars = <ThrowOnError extends boolean = false>(options: Options<ProjectsUpdateEnvVarsData, ThrowOnError>) => {
    return (options.client ?? client).patch<ProjectsUpdateEnvVarsResponses, ProjectsUpdateEnvVarsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/env-vars',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Environment Variables
 * Creates new environment variables for a given project. This endpoint will fail if any of the specified environment variable keys already exist, unless upsert is set to true.
 */
export const projectsCreateEnvVars = <ThrowOnError extends boolean = false>(options: Options<ProjectsCreateEnvVarsData, ThrowOnError>) => {
    return (options.client ?? client).post<ProjectsCreateEnvVarsResponses, ProjectsCreateEnvVarsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/env-vars',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Environment Variables
 * Deletes multiple environment variables for a given project by their IDs.
 */
export const projectsDeleteEnvVars = <ThrowOnError extends boolean = false>(options: Options<ProjectsDeleteEnvVarsData, ThrowOnError>) => {
    return (options.client ?? client).post<ProjectsDeleteEnvVarsResponses, ProjectsDeleteEnvVarsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/env-vars/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Environment Variable
 * Retrieves a specific environment variable for a given project by its ID, including its value.
 */
export const projectsGetEnvVar = <ThrowOnError extends boolean = false>(options: Options<ProjectsGetEnvVarData, ThrowOnError>) => {
    return (options.client ?? client).get<ProjectsGetEnvVarResponses, ProjectsGetEnvVarErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/env-vars/{environmentVariableId}',
        ...options
    });
};

/**
 * Find Rate Limit
 * Retrieves rate limit information for a given scope. Useful for monitoring usage limits and avoiding throttling.
 */
export const rateLimitsFind = <ThrowOnError extends boolean = false>(options?: Options<RateLimitsFindData, ThrowOnError>) => {
    return (options?.client ?? client).get<RateLimitsFindResponses, RateLimitsFindErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/rate-limits',
        ...options
    });
};

/**
 * Get User
 * Retrieves information about the authenticated user, including their ID, name, email, and account metadata.
 */
export const userGet = <ThrowOnError extends boolean = false>(options?: Options<UserGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserGetResponses, UserGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user',
        ...options
    });
};

/**
 * Get Billing
 * Fetches billing usage and quota information for the authenticated user. Can be scoped to a specific context (e.g. project or namespace).
 */
export const userGetBilling = <ThrowOnError extends boolean = false>(options?: Options<UserGetBillingData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserGetBillingResponses, UserGetBillingErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user/billing',
        ...options
    });
};

/**
 * Get Plan
 * Returns the current subscription plan for the authenticated user, including tier details and feature limits.
 */
export const userGetPlan = <ThrowOnError extends boolean = false>(options?: Options<UserGetPlanData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserGetPlanResponses, UserGetPlanErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user/plan',
        ...options
    });
};

/**
 * Get User Scopes
 * Retrieves all accessible scopes for the authenticated user, such as personal workspaces or shared teams.
 */
export const userGetScopes = <ThrowOnError extends boolean = false>(options?: Options<UserGetScopesData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserGetScopesResponses, UserGetScopesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user/scopes',
        ...options
    });
};

/**
 * Get Usage Report
 * Retrieves detailed usage events for the authenticated user or team, including costs, event types, models used, and metadata. Shows the same data as displayed in the usage dashboard. Can be filtered by chatId to show usage for a specific chat.
 */
export const reportsGetUsage = <ThrowOnError extends boolean = false>(options?: Options<ReportsGetUsageData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReportsGetUsageResponses, ReportsGetUsageErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/reports/usage',
        ...options
    });
};
